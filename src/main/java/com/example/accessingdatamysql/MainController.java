package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping(path="/someone") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // Thicurl s means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired // Thicurl s means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private HobbyRepository hobbyRepository;

	@GetMapping(path="/users")
	public @ResponseBody Iterable<User> getAllUsers() {
		return userRepository.findAll();
	}

	//na pozniej
	/*
	@GetMapping(path="/all_hobbies_for_user/")
	public @ResponseBody Iterable<Hobby> getAllHobbiesForUser(@RequestParam User user) {
		return hobbyRepository.findByUser(user);
	}*/

	@GetMapping(path="/hobbies/{user_id}")
	public Iterable<Hobby> getAllHobbiesForUser(@PathVariable("user_id") Integer user_id) {
		return hobbyRepository.findByID(user_id);
	}

	@PostMapping(path="/users/{user_id}/hobby")
	public @ResponseBody String addHobbyForUser(@RequestBody HobbyDTO hobbyDto, @PathVariable Integer user_id) {

		Optional<User> userFromRepo = userRepository.findById(user_id);
		User user = userFromRepo.get();
		addHobby(hobbyDto);
		Hobby createdHobby = new Hobby();
		List<Hobby> listOfHobbies = user.getHobbies();
		listOfHobbies.add(createdHobby);
		user.setHobbies(listOfHobbies);
		userRepository.save(user);
		return user.toString();

		//return "Saved hobby for user";
	}


	@PostMapping(path="/user")
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved user";
	}


	@PostMapping(path="/hobby")
	public @ResponseBody String addHobby(@RequestBody HobbyDTO hobbyDto) {
		// To wszystko się generalnie powinno dziać w serwisie a nie kontrolerze
		Hobby hobby = new Hobby();
		hobby.setName(hobbyDto.getName());
		hobbyRepository.save(hobby);
		return "Saved hobby"; // Poczytaj o HTTP Status Codes i zamiast zwracać stringa dziwnego to zwrócić HTTP 200 OK albo HTTP 201 Created
	}
}
